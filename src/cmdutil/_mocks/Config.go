// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import env "github.com/Shopify/themekit/src/env"
import mock "github.com/stretchr/testify/mock"

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Config) Get(_a0 string, _a1 ...env.Env) (*env.Env, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *env.Env
	if rf, ok := ret.Get(0).(func(string, ...env.Env) *env.Env); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*env.Env)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...env.Env) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields:
func (_m *Config) Save() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: _a0, _a1, _a2
func (_m *Config) Set(_a0 string, _a1 env.Env, _a2 ...env.Env) (*env.Env, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *env.Env
	if rf, ok := ret.Get(0).(func(string, env.Env, ...env.Env) *env.Env); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*env.Env)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, env.Env, ...env.Env) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
