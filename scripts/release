#!/usr/bin/env ruby
require 'fog/aws'
require 'dotenv'
require 'json'
require 'digest'
require 'git'

Dotenv.load

class FileManager
  ALL_RELEASES = 'releases/all.json'.freeze
  LATEST_RELEASE = 'releases/latest.json'.freeze

  attr_reader :bucket

  def initialize(bucket)
    @bucket = bucket
  end

  def upload!(filename, content)
    file = bucket.files.new(
      key: filename,
      body: content,
      public: true
    )
    file.save
  end

  def url(filename)
    get_file(filename).public_url
  end

  def fetch(filename, default: '')
    exists?(filename) ? get_file(filename).body : default
  end

  private

  def get_file(name)
    bucket.files.get(name)
  end

  def exists?(name)
    bucket.files.head(name)
  rescue
    false
  end
end

class Repository
  GIT_DIR = File.expand_path(__FILE__ + '/../..')

  def initialize
    @git = Git.open(GIT_DIR)
    ensure_head_is_at_latest_version
  end

  def latest_version
    latest_tag.name
  end

  private
  def latest_tag
    @git.tags.last
  end

  def ensure_head_is_at_latest_version
    if @git.object('HEAD').sha != latest_tag.sha
      puts "Your current HEAD does not match tag #{latest_version}."
      puts "Verify you are at the right commit or create a new tag."
      exit(1)
    end
  end
end

class Release
  attr_reader :platform, :file, :version, :full_name, :data
  attr_accessor :location

  def initialize(version: nil, platform: nil, filename: nil)
    @platform = platform
    @version = version
    load_file(filename)
  end

  def hexdigest
    @hexdigest ||= Digest::MD5.hexdigest(data)
  end

  def as_hash
    {
      "name" => platform,
      "url" => location,
      "digest" => hexdigest
    }
  end

  private
  def load_file(filename)
    file = File.open(filename, 'rb')
    @full_name = [version, platform, File.basename(file.path)].join('/')
    @data = file.read
    file.close
  end
end

class ReleaseGenerator
  attr_reader :version, :releases, :storage_manager

  DIST_DIR = File.expand_path(__FILE__ + "/../../build/dist")
  BUILDS = %w(darwin-amd64 linux-386 linux-amd64 windows-386 windows-amd64)

  def initialize(version, storage_manager)
    ensure_builds_have_been_created
    @version = version
    @releases = prepare_releases
    @storage_manager = storage_manager
  end

  def upload!(logger: nil)
    ensure_release_is_necessary
    releases.each do |release|
      logger.puts "  - Uploading #{release.full_name}" if logger
      storage_manager.upload!(release.full_name, release.data)
      release.location = storage_manager.url(release.full_name)
    end
  end

  private

  def ensure_builds_have_been_created
    return if File.exist?(DIST_DIR)
    puts "Distribution build at #{DIST_DIR} has not been created. Run 'make dist' before attempting to create a new release"
    exit(1)
  end

  def ensure_release_is_necessary
    feed = JSON.parse(storage_manager.fetch(FileManager::ALL_RELEASES, default:  [].to_json))
    if feed.find { |r| r['version'] == version }
      puts "v#{version} has already been deployed. If this was intended to be a new release, ensure version.go has been updated and add an appropriate tag to git"
      exit(1)
    end
  end

  def prepare_releases
    BUILDS.map do |platform|
      build_location = File.expand_path(DIST_DIR + "/#{platform}")
      binary = Dir.entries(build_location).find { |name| name =~ /theme/ }
      Release.new(version: version, platform: platform, filename: [build_location, binary].join('/'))
    end
  end
end

class FeedGenerator
  attr_reader :version, :releases, :storage_manager

  def initialize(version, releases, storage_manager)
    @version = version
    @releases = releases
    @storage_manager = storage_manager
  end

  def upload!(logger: nil)
    logger.puts 'Updating feeds' if logger
    storage_manager.upload!(FileManager::LATEST_RELEASE, latest_feed)
    storage_manager.upload!(FileManager::ALL_RELEASES, entire_feed)
  end

  private

  def latest_feed
    as_hash.to_json
  end

  def entire_feed
    full_feed = JSON.parse(storage_manager.fetch(FileManager::ALL_RELEASES, default: [].to_json))
    full_feed << as_hash
    full_feed.uniq.to_json
  end

  def as_hash
    {
      version: version,
      platforms: releases.map(&:as_hash)
    }
  end
end

puts 'Establishing Connection to Amazon S3'
connection = Fog::Storage.new(
  provider: 'AWS',
  aws_access_key_id: ENV['AWS_KEY_ID'],
  aws_secret_access_key: ENV['AWS_SECRET_KEY']
)

bucket = Fog::Storage::AWS::Directory.new(key: ENV['AWS_BUCKET_NAME'], service: connection)
manager = FileManager.new(bucket)
puts 'Determining latest release'
repo = Repository.new
version = repo.latest_version

puts "Uploading releases for #{version} to S3"

release_generator = ReleaseGenerator.new(version, manager)
release_generator.upload!(logger: STDOUT)

feed_generator = FeedGenerator.new(version, release_generator.releases, manager)
feed_generator.upload!(logger: STDOUT)
